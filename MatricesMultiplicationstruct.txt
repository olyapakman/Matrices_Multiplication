
	1	2	3	4
	5	6	7	8
	9	10	11	12
	
	
	a	b	c	d
	e	f	g	j
	h	i	p	k
	l	m	n	o
	
	
	1*a+2*e+3*h+4*l
	1*b+2*f+3*i+4*m
	1*c+2*g+3*p+4*n
	1*d+2*j+3*k+4*o
	
	5*a+6*e+7*h+8*l
	5*b+6*f+7*i+8*m
	5*c+6*g+7*p+8*n
	5*d+6*j+7*k+8*o
	
	9*a+10*e+11*h+12*l
	9*b+10*f+11*i+12*m
	9*c+10*g+11*p+12*n
	9*d+10*j+11*k+12*o
	
	
	
	ij*jh
	h < кол-во столбцов второй матрицы
	0 <= j < кол-во столбцов первой матрицы
	i < кол-во строк первой матрицы
	
До тех пор, пока i не достигнет кол-ва строк первой матрицы делаем это:
	До тех пор, пока h не достигнет кол-ва столбцов второй таблицы делаем это:
	00*00+01*10+02*20+03*30		//увеличивается j; после выполнения увеличивается h; j сбрасывается до 0
	00*01+01*11+02*21+03*31		//то же
	00*02+01*12+02*22+03*32		//то же
	00*03+01*13+02*23+03*33		//то же
	
	После сбрасываем h до 0; j до 0. увеличиваем i на 1.
	
	И пошли по новой:
	10*00+11*10+12*20+13*30
	10*01+11*11+12*21+13*31
	10*02+11*12+12*22+13*32
	10*03+11*13+12*23+13*33
	
	
	20*00+21*10+22*20+23*30
	20*01+21*11+22*21+23*31
	20*02+21*12+22*22+23*32
	20*03+21*13+22*23+23*33
	
	
	
	public static int[][] multiply (int arrOne[int x][int y], int arrTwo[int m][int n]) {
	
	if (m != y) {
	Exception
	} else {
	int i = 0;
	int j = 0;
	int h = 0;
	int r = 0;
	
	while (i < x) {
		while (h < n) {
			while (j < y) {
			r += arrOne[i][j] * arrTwo[j][h];
			j++;
			}
		arrRes[i][h] = r;
		r = 0;
		j = 0;
		h++;
		}
	h = 0;
	j = 0;
	r = 0;
	i++;		
	}
	return arrRes;
	}
		
	}
